// –†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞: —Å –ø–æ–º–æ—â—å—é –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
// –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–≤–µ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É.
// –¢–∞–∫–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ö–æ–¥–∞ –≥—Ä–∞—Ñ–∞: –ø–æ–∏—Å–∫ –≤ –≥–ª—É–±–∏–Ω—É (DFS) –∏–ª–∏ –ø–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É (BFS) –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥–∞ –≤–µ—Ä—à–∏–Ω.
// üîç –ó–∞–º–µ—á–∞–Ω–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä–∞—Ñ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–ª–∏ –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
private:
    vector<vector<int>> adjMatrix; // –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏
    int num_vertices;              // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω
    bool directed;                 // –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏ –≥—Ä–∞—Ñ

public:
    Graph(int n) {
        num_vertices = n;
        directed = false;
        adjMatrix.resize(n, vector<int>(n, 0));
    }

    // –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    void set_adjacency_matrix(const vector<vector<int>>& matrix) {
        adjMatrix = matrix;
        directed = false;
        for (int i = 0; i < num_vertices; ++i)
            for (int j = 0; j < num_vertices; ++j)
                if (adjMatrix[i][j] != adjMatrix[j][i])
                    directed = true;
    }

    // –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    void set_incidence_matrix(const vector<vector<int>>& incMatrix) {
        int numEdges = incMatrix[0].size();
        adjMatrix.assign(num_vertices, vector<int>(num_vertices, 0));
        directed = false;

        for (int j = 0; j < numEdges; ++j) {
            int from = -1, to = -1;
            for (int i = 0; i < num_vertices; ++i) {
                if (incMatrix[i][j] == 1) {
                    if (from == -1)
                        from = i;
                    else
                        to = i;
                } else if (incMatrix[i][j] == -1) {
                    from = i;
                    directed = true;
                }
            }
            if (from != -1 && to != -1) {
                adjMatrix[from][to] = 1;
                if (!directed)
                    adjMatrix[to][from] = 1;
            }
        }
    }

    void bfs(int start) {
        vector<bool> visited(num_vertices, false);
        queue<int> q;
        q.push(start);
        visited[start] = true;
        cout << "BFS traversal: ";
        while (!q.empty()) {
            int current = q.front();
            q.pop();
            cout << current << " ";
            for (int i = 0; i < num_vertices; ++i) {
                if (adjMatrix[current][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        cout << endl;
    }

    void print_graph_type() {
        if (directed)
            cout << "Graph is directed.\n";
        else
            cout << "Graph is undirected.\n";
    }
};

int main() {
    // Test 1
    cout << "--- Test 1: Adjacency matrix (undirected) ---\n";
    Graph g1(4);
    g1.set_adjacency_matrix({
        {0,1,0,0},
        {1,0,1,1},
        {0,1,0,0},
        {0,1,0,0}
    });
    g1.print_graph_type();
    g1.bfs(0);
    // Test 2
    cout << "\n--- Test 2: Adjacency matrix (directed) ---\n";
    Graph g2(3);
    g2.set_adjacency_matrix({
        {0,1,0},
        {0,0,1},
        {1,0,0}
    });
    g2.print_graph_type();
    g2.bfs(0);
    // Test 3
    cout << "\n--- Test 3: Disconnected graph (adjacency matrix) ---\n";
    Graph g3(4);
    g3.set_adjacency_matrix({
        {0,1,0,0},
        {1,0,0,0},
        {0,0,0,0},
        {0,0,0,0}
    });
    g3.print_graph_type();
    g3.bfs(0);
    // Test 4
    cout << "\n--- Test 4: Empty graph (adjacency matrix) ---\n";
    Graph g4(3);
    g4.set_adjacency_matrix({
        {0,0,0},
        {0,0,0},
        {0,0,0}
    });
    g4.print_graph_type();
    g4.bfs(0);
    // Test 5
    cout << "\n--- Test 5: Incidence matrix (undirected) ---\n";
    Graph g5(3);
    g5.set_incidence_matrix({
        {1, 0},
        {1, 1},
        {0, 1}
    });
    g5.print_graph_type();
    g5.bfs(0);
    // Test 6
    cout << "\n--- Test 6: Incidence matrix (directed) ---\n";
    Graph g6(3);
    g6.set_incidence_matrix({
        {-1, 0},
        { 1, -1},
        { 0, 1}
    });
    g6.print_graph_type();
    g6.bfs(0);
    return 0;
}
